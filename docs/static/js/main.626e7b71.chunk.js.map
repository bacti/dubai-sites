{"version":3,"sources":["Defines.js","App.js","serviceWorker.js","index.js"],"names":["DUBAI_LOCATIONS","name","latitude","longitude","Styles","styled","div","withConfig","displayName","componentId","Table","_ref","columns","data","_useTable","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","react_default","a","createElement","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","geolocated","positionOptions","enableHighAccuracy","watchPosition","userDecisionTimeout","props","React","useMemo","_","Header","accessor","coords","isGeolocationAvailable","isGeolocationEnabled","console","log","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAgBMA,EACN,CACI,CACIC,KAAM,mBACNC,SAAU,WACVC,UAAW,YAEf,CACIF,KAAM,iCACNC,SAAU,WACVC,UAAW,YAEf,CACIF,KAAM,iCACNC,SAAU,WACVC,UAAW,YAEf,CACIF,KAAM,qBACNC,SAAU,WACVC,UAAW,aC9BbC,EAASC,IAAOC,IAAVC,WAAA,CAAAC,YAAA,cAAAC,YAAA,gBAAGJ,CAAH,8VAqCZ,SAASK,EAATC,GACA,IADiBC,EACjBD,EADiBC,QAASC,EAC1BF,EAD0BE,KAC1BC,EAQQC,YAAS,CAAEH,UAASC,SALpBG,EAHRF,EAGQE,cACAC,EAJRH,EAIQG,kBACAC,EALRJ,EAKQI,aACAC,EANRL,EAMQK,KACAC,EAPRN,EAOQM,WAGJ,OACIC,EAAAC,EAAAC,cAAA,QAAWP,IACPK,EAAAC,EAAAC,cAAA,aAEIL,EAAaM,IAET,SAAAC,GAAW,OAEPJ,EAAAC,EAAAC,cAAA,KAAQE,EAAYC,sBACfD,EAAYE,QAAQH,IAAI,SAAAI,GAAM,OAC3BP,EAAAC,EAAAC,cAAA,KAAQK,EAAOC,iBAAmBD,EAAOE,OAAO,iBAOpET,EAAAC,EAAAC,cAAA,QAAWN,IAEPE,EAAKK,IAED,SAACO,EAAKC,GAGF,OADAZ,EAAWW,GAEPV,EAAAC,EAAAC,cAAA,KAAQQ,EAAIE,cACNF,EAAIG,MAAMV,IAAI,SAAAW,GAAI,OAAId,EAAAC,EAAAC,cAAA,KAAQY,EAAKC,eAAiBD,EAAKL,OAAO,gBAkFlG,IASeO,uBARf,CACIC,gBACA,CACIC,oBAAoB,GAExBC,eAAe,EACfC,oBAAqB,KAEVJ,CAhFf,SAAaK,GAET,IAAM9B,EAAU+B,IAAMC,QAElB,SAAAC,GAAC,MACD,CACI,CACIC,OAAQ,WACRC,SAAU,QAEd,CACID,OAAQ,WACRC,SAAU,UAEd,CACID,OAAQ,WACRC,SAAU,YAEd,CACID,OAAQ,YACRC,SAAU,eAGlB,IAEElC,EAAO8B,IAAMC,QAEf,SAAAC,GAAC,OAAI7C,GACL,IAEIgD,EAAyDN,EAAzDM,OAAQC,EAAiDP,EAAjDO,uBAAwBC,EAAyBR,EAAzBQ,qBAIxC,OAFAC,QAAQC,IAAIvC,GAEPoC,EAGAC,EASAF,EAID3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gCACIF,EAAAC,EAAAC,cAAA,UAAKyB,EAAO9C,WAEhBmB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UAAKyB,EAAO7C,cAIxBkB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACnB,EAAD,KACIiB,EAAAC,EAAAC,cAACb,EAAD,CAAOE,QAASA,EAASC,KAAMA,MAlBhCQ,EAAAC,EAAAC,cAAA,+CARHF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,kDAPDF,EAAAC,EAAAC,cAAA,0DClHK8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS5B,OAAOT,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.626e7b71.chunk.js","sourcesContent":["const SAI_LOCATIONS =\r\n[\r\n    {\r\n        name: 'coffee bar',\r\n        latitude: 10.8089425,\r\n        longitude: 106.7129067,\r\n        alt: 35.1999969482419\r\n    },\r\n    {\r\n        name: 'Elevator',\r\n        latitude: 10.8089925,\r\n        longitude: 106.71319,\r\n        alt: 35.19999694824219\r\n    },\r\n]\r\n\r\nconst DUBAI_LOCATIONS =\r\n[\r\n    {\r\n        name: 'Mall of Emirates',\r\n        latitude: 25.1157036,\r\n        longitude: 55.2001866,\r\n    },\r\n    {\r\n        name: 'Deira city center - 6th Street',\r\n        latitude: 25.2680143,\r\n        longitude: 55.3265629,\r\n    },\r\n    {\r\n        name: 'Deira city center - 8th Street',\r\n        latitude: 25.2511071,\r\n        longitude: 55.3323843,\r\n    },\r\n    {\r\n        name: 'Mirdif City center',\r\n        latitude: 25.2163238,\r\n        longitude: 55.4056062,\r\n    },\r\n]\r\n\r\nexport\r\n{\r\n    SAI_LOCATIONS,\r\n    DUBAI_LOCATIONS,\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable } from 'react-table'\r\nimport { geolocated } from 'react-geolocated'\r\nimport { SAI_LOCATIONS, DUBAI_LOCATIONS } from './Defines'\r\n\r\nconst Styles = styled.div\r\n`\r\n    padding: 0;\r\n    table {\r\n        border-spacing: 0;\r\n        border: 1px solid white;\r\n        text-align: center;\r\n        width: 100%;\r\n        th,\r\n        td {\r\n            margin: 0;\r\n            padding: 0.5rem;\r\n            border-bottom: 1px solid white;\r\n            border-right: 1px solid white;\r\n            :last-child {\r\n                border-right: 0;\r\n            }\r\n        }\r\n        td:first-child {\r\n            font-size: 0.7rem;\r\n        }\r\n        tr {\r\n            :nth-child(odd) {\r\n                background-color: #404856\r\n            }\r\n            :last-child {\r\n                td {\r\n                    border-bottom: 0;\r\n                }\r\n            }\r\n            th {\r\n                background-color: #282c34;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nfunction Table({ columns, data })\r\n{\r\n    const\r\n    {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({ columns, data })\r\n\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n            {\r\n                headerGroups.map\r\n                (\r\n                    headerGroup =>\r\n                    (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    )\r\n                )\r\n            }\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n            {\r\n                rows.map\r\n                (\r\n                    (row, i) =>\r\n                    {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                { row.cells.map(cell => <td {...cell.getCellProps()}>{cell.render('Cell')}</td>) }\r\n                            </tr>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nfunction App(props)\r\n{\r\n    const columns = React.useMemo\r\n    (\r\n        _ =>\r\n        [\r\n            {\r\n                Header: 'Location',\r\n                accessor: 'name',\r\n            },\r\n            {\r\n                Header: 'Distance',\r\n                accessor: 'visits',\r\n            },\r\n            {\r\n                Header: 'Latitude',\r\n                accessor: 'latitude',\r\n            },\r\n            {\r\n                Header: 'Longitude',\r\n                accessor: 'longitude',\r\n            },\r\n        ],\r\n        []\r\n    )\r\n    const data = React.useMemo\r\n    (\r\n        _ => DUBAI_LOCATIONS,\r\n        []\r\n    )\r\n    const { coords, isGeolocationAvailable, isGeolocationEnabled } = props\r\n\r\n    console.log(data)\r\n\r\n    if (!isGeolocationAvailable)\r\n        return <div>Your browser does not support Geolocation</div>\r\n    else\r\n    if (!isGeolocationEnabled)\r\n        return (\r\n            <div>\r\n                <div>Geolocation is not enabled</div>\r\n                <div>please enable location in device's settings</div>\r\n                <div>and allow us use device's location</div>\r\n            </div>\r\n        )\r\n    else\r\n    if (!coords)\r\n        return <div>Getting the location data&hellip; </div>\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td>current latitude: </td>\r\n                        <td>{coords.latitude}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>current longitude: </td>\r\n                        <td>{coords.longitude}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <br />\r\n            <Styles>\r\n                <Table columns={columns} data={data} />\r\n            </Styles>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst options =\r\n{\r\n    positionOptions:\r\n    {\r\n        enableHighAccuracy: true,\r\n    },\r\n    watchPosition: true,\r\n    userDecisionTimeout: 500,\r\n}\r\nexport default geolocated(options)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}